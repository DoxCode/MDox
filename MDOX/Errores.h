#ifndef ERRORES_H
#define ERRORES_H

#include <string>
#include <vector>
#include <list>
#include <tuple>
#include <iostream>

#include "Estructuras.h"

class Errores
{
	public:

		enum ERROR_TYPE {
			TY_ERROR,
			TY_WARNING,
			TY_INFO,
		};

		enum NUM_ERRORES {

			ERROR_MAIN_NO_ENCONTRADO, //Error 0010
			ERROR_CRITICO, // Error 0011
			ERROR_INESPERADO, // Error 0012

			ERROR_DE_SINTAXIS, // Error 1001

			ERROR_VARIABLE_NO_EXISTE, // Error 2001
			ERROR_INICIALIZACION_VARIABLE, // Error 2002
			ERROR_DESC_DECLARACION_VARIABLE, // Error 2003
			ERROR_CONVERSION_VARIABLE_INT,	// Error 2004
			ERROR_CONVERSION_VARIABLE_LONG,	// Error 2004
			ERROR_CONVERSION_VARIABLE_REAL,	// Error 2004
			ERROR_CONVERSION_VARIABLE_BOOL,	// Error 2004
			ERROR_CONVERSION_VARIABLE_STRING,	// Error 2004
			ERROR_COMPARACION_INT_STRING, //Error 2005
			ERROR_COMPARACION_REAL_STRING, //Error 2005
			ERROR_COMPARACION_BOOL_STRING, //Error 2005
			ERROR_COMPARACION_DESCONOCIDO,	// Error 2006
			ERROR_INCREMENTO_VARIABLE_DESCONOCIDA,	// Error 2007
			ERROR_DECREMENTO_VARIABLE_DESCONOCIDA,	// Error 2007
			ERROR_INC_DEC_VARIABLE_INVALIDA,	// Error 2008


			//Operaciones matemáticas
			ERROR_OPERACION_INVALIDA_VOID, //Error 2007
			ERROR_MOD_SOLO_ENTERO, //Error 2008
			ERROR_MATH_STRING, //Error 2009
			ERROR_OPERACION_INVALIDA_NULL, //Error 2010


			ERROR_EXPRESION_NO_CONVERTIBLE_BOOL, //Error 2011
			ERROR_MATH_MULT_STRING, //Error 2012
			ERROR_MATH_MINUS_STRING, //Error 2013

			ERROR_CONVERSION_DESCONOCIDA,	// Error 2014
			ERROR_OPERACION_DESCONOCIDA,	// Error 2015
			ERROR_OPERACION_INVALIDA, //2016
			ERROR_OPERADOR_INVALIDO, //2017
			ERROR_ASIGNACION_VALOR_VOID, //2018
			ERROR_OFFSET_INVALIDO, //2019

			ERROR_FUNCION_PARAMETRO_OPERACION_INVALIDA, // Error 4001
			ERROR_FUNCION_NO_RECONOCIDA, //Error 4002
			ERROR_FUNCION_ENTRADA_DECLARADA, //Error 4003
			ERROR_FUNCION_ERROR_OPERACIONES_ENTRADA, //Error 4004
			ERROR_FUNCION_IMPOSIBLE_RECUPERAR_FECHA, // Error 4005
			ERROR_FUNCION_NO_DECLARADA, // Error 4006

			ERROR_CLASE_CONSTRUCTOR_SINTAXIS, // Error 4500
			ERROR_CLASE_CONSTRUCTOR_ID_NOT_FOUND, // Error 4501
			ERROR_CLASE_CONSTRUCTOR_NOT_ID, // Error 4502
			ERROR_CLASE_STATIC_IS_NOT_VAR_FUNCT, // Error 4503
			ERROR_CLASE_SINTAXIS, // Error 4504
			ERROR_CLASE_VARIABLE_NO_VALIDA, // Error 4505
			ERROR_CLASE_CONSTRUCTOR_NO_VALIDO, // Error 4506
			ERROR_CLASE_OPERADOR_INVALIDO, // Error 4507
			ERROR_CLASE_SENTENCIA_INVALIDA, // Error 4508
			ERROR_CLASE_OPERADOR_NO_DECLARADO, //4509
			ERROR_CLASE_OPERADOR_SENTENCIA_INVALIDA, //4510
			ERROR_CLASE_OPERADOR_ES_BINARIO, // Error 4511
			ERROR_CLASE_OPERADOR_NO_ES_BINARIO, // Error 4512

			ERROR_FORMAT_NO_ACEPTADA, // Error 4513
		};

		enum NUM_WARNING {
			WARNING_VARIABLE_YA_DECLARADA, // Warning 2001
			WARNING_FUNCION_VALOR_DEVUELTO_VOID, //WRNG 2002
		};

	static OutData_Parametros* outData;
	 static bool saltarErrores;
     static void generarError(Errores::NUM_ERRORES error, OutData_Parametros * node, std::string value = "", std::string value2 = "");
	 static void generarWarning(Errores::NUM_WARNING error, OutData_Parametros * node, std::string value = "", std::string value2 = "");

	private:
	 static void generarCabeceraError(OutData_Parametros * node, int numero_error, Errores::ERROR_TYPE tipo, bool runtime = true);

};


#endif